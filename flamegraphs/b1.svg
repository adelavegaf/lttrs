<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="534" onload="init(evt)" viewBox="0 0 1200 534" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="534" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="517.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="517.00"> </text><svg id="frames" x="10" width="1180" total_samples="2177"><g><title>libsystem_malloc.dylib`free (1 samples, 0.05%)</title><rect x="0.0000%" y="389" width="0.0459%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="399.50"></text></g><g><title>lttrs`DYLD-STUB$$free (1 samples, 0.05%)</title><rect x="0.0459%" y="389" width="0.0459%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="1"/><text x="0.2959%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (1 samples, 0.05%)</title><rect x="0.0919%" y="373" width="0.0459%" height="15" fill="rgb(221,193,54)" fg:x="2" fg:w="1"/><text x="0.3419%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (1 samples, 0.05%)</title><rect x="0.0919%" y="357" width="0.0459%" height="15" fill="rgb(248,212,6)" fg:x="2" fg:w="1"/><text x="0.3419%" y="367.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.05%)</title><rect x="0.0919%" y="341" width="0.0459%" height="15" fill="rgb(208,68,35)" fg:x="2" fg:w="1"/><text x="0.3419%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.05%)</title><rect x="0.1378%" y="373" width="0.0459%" height="15" fill="rgb(232,128,0)" fg:x="3" fg:w="1"/><text x="0.3878%" y="383.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (1 samples, 0.05%)</title><rect x="0.1837%" y="373" width="0.0459%" height="15" fill="rgb(207,160,47)" fg:x="4" fg:w="1"/><text x="0.4337%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.05%)</title><rect x="0.2756%" y="357" width="0.0459%" height="15" fill="rgb(228,23,34)" fg:x="6" fg:w="1"/><text x="0.5256%" y="367.50"></text></g><g><title>lttrs`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.09%)</title><rect x="0.4134%" y="341" width="0.0919%" height="15" fill="rgb(218,30,26)" fg:x="9" fg:w="2"/><text x="0.6634%" y="351.50"></text></g><g><title>lttrs`core::hash::BuildHasher::hash_one (1 samples, 0.05%)</title><rect x="0.5053%" y="341" width="0.0459%" height="15" fill="rgb(220,122,19)" fg:x="11" fg:w="1"/><text x="0.7553%" y="351.50"></text></g><g><title>lttrs`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (13 samples, 0.60%)</title><rect x="0.2297%" y="373" width="0.5972%" height="15" fill="rgb(250,228,42)" fg:x="5" fg:w="13"/><text x="0.4797%" y="383.50"></text></g><g><title>lttrs`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (11 samples, 0.51%)</title><rect x="0.3215%" y="357" width="0.5053%" height="15" fill="rgb(240,193,28)" fg:x="7" fg:w="11"/><text x="0.5715%" y="367.50"></text></g><g><title>lttrs`hashbrown::raw::RawTable&lt;T,A&gt;::insert (6 samples, 0.28%)</title><rect x="0.5512%" y="341" width="0.2756%" height="15" fill="rgb(216,20,37)" fg:x="12" fg:w="6"/><text x="0.8012%" y="351.50"></text></g><g><title>lttrs`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (6 samples, 0.28%)</title><rect x="0.5512%" y="325" width="0.2756%" height="15" fill="rgb(206,188,39)" fg:x="12" fg:w="6"/><text x="0.8012%" y="335.50"></text></g><g><title>lttrs`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.14%)</title><rect x="0.6890%" y="309" width="0.1378%" height="15" fill="rgb(217,207,13)" fg:x="15" fg:w="3"/><text x="0.9390%" y="319.50"></text></g><g><title>lttrs`core::slice::memchr::memchr_aligned (2 samples, 0.09%)</title><rect x="0.8268%" y="373" width="0.0919%" height="15" fill="rgb(231,73,38)" fg:x="18" fg:w="2"/><text x="1.0768%" y="383.50"></text></g><g><title>lttrs`&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.05%)</title><rect x="0.9187%" y="325" width="0.0459%" height="15" fill="rgb(225,20,46)" fg:x="20" fg:w="1"/><text x="1.1687%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.05%)</title><rect x="0.9646%" y="277" width="0.0459%" height="15" fill="rgb(210,31,41)" fg:x="21" fg:w="1"/><text x="1.2146%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.05%)</title><rect x="1.0106%" y="277" width="0.0459%" height="15" fill="rgb(221,200,47)" fg:x="22" fg:w="1"/><text x="1.2606%" y="287.50"></text></g><g><title>lttrs`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (1 samples, 0.05%)</title><rect x="1.0565%" y="277" width="0.0459%" height="15" fill="rgb(226,26,5)" fg:x="23" fg:w="1"/><text x="1.3065%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.14%)</title><rect x="1.1484%" y="261" width="0.1378%" height="15" fill="rgb(249,33,26)" fg:x="25" fg:w="3"/><text x="1.3984%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.09%)</title><rect x="1.2862%" y="261" width="0.0919%" height="15" fill="rgb(235,183,28)" fg:x="28" fg:w="2"/><text x="1.5362%" y="271.50"></text></g><g><title>lttrs`&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.05%)</title><rect x="1.3780%" y="261" width="0.0459%" height="15" fill="rgb(221,5,38)" fg:x="30" fg:w="1"/><text x="1.6280%" y="271.50"></text></g><g><title>lttrs`__rdl_alloc (2 samples, 0.09%)</title><rect x="1.4240%" y="261" width="0.0919%" height="15" fill="rgb(247,18,42)" fg:x="31" fg:w="2"/><text x="1.6740%" y="271.50"></text></g><g><title>lttrs`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.14%)</title><rect x="1.5158%" y="261" width="0.1378%" height="15" fill="rgb(241,131,45)" fg:x="33" fg:w="3"/><text x="1.7658%" y="271.50"></text></g><g><title>lttrs`alloc::raw_vec::finish_grow (1 samples, 0.05%)</title><rect x="1.6077%" y="245" width="0.0459%" height="15" fill="rgb(249,31,29)" fg:x="35" fg:w="1"/><text x="1.8577%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.05%)</title><rect x="1.6077%" y="229" width="0.0459%" height="15" fill="rgb(225,111,53)" fg:x="35" fg:w="1"/><text x="1.8577%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.05%)</title><rect x="1.6077%" y="213" width="0.0459%" height="15" fill="rgb(238,160,17)" fg:x="35" fg:w="1"/><text x="1.8577%" y="223.50"></text></g><g><title>lttrs`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (1 samples, 0.05%)</title><rect x="1.6537%" y="261" width="0.0459%" height="15" fill="rgb(214,148,48)" fg:x="36" fg:w="1"/><text x="1.9037%" y="271.50"></text></g><g><title>lttrs`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.05%)</title><rect x="1.6537%" y="245" width="0.0459%" height="15" fill="rgb(232,36,49)" fg:x="36" fg:w="1"/><text x="1.9037%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.09%)</title><rect x="1.9293%" y="245" width="0.0919%" height="15" fill="rgb(209,103,24)" fg:x="42" fg:w="2"/><text x="2.1793%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (7 samples, 0.32%)</title><rect x="2.0211%" y="245" width="0.3215%" height="15" fill="rgb(229,88,8)" fg:x="44" fg:w="7"/><text x="2.2711%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (8 samples, 0.37%)</title><rect x="2.3427%" y="245" width="0.3675%" height="15" fill="rgb(213,181,19)" fg:x="51" fg:w="8"/><text x="2.5927%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.18%)</title><rect x="2.7102%" y="245" width="0.1837%" height="15" fill="rgb(254,191,54)" fg:x="59" fg:w="4"/><text x="2.9602%" y="255.50"></text></g><g><title>lttrs`&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.05%)</title><rect x="2.8939%" y="245" width="0.0459%" height="15" fill="rgb(241,83,37)" fg:x="63" fg:w="1"/><text x="3.1439%" y="255.50"></text></g><g><title>lttrs`DYLD-STUB$$free (2 samples, 0.09%)</title><rect x="2.9398%" y="245" width="0.0919%" height="15" fill="rgb(233,36,39)" fg:x="64" fg:w="2"/><text x="3.1898%" y="255.50"></text></g><g><title>lttrs`DYLD-STUB$$memcpy (1 samples, 0.05%)</title><rect x="3.0317%" y="245" width="0.0459%" height="15" fill="rgb(226,3,54)" fg:x="66" fg:w="1"/><text x="3.2817%" y="255.50"></text></g><g><title>lttrs`__rdl_alloc (1 samples, 0.05%)</title><rect x="3.0776%" y="245" width="0.0459%" height="15" fill="rgb(245,192,40)" fg:x="67" fg:w="1"/><text x="3.3276%" y="255.50"></text></g><g><title>lttrs`__rdl_realloc (1 samples, 0.05%)</title><rect x="3.2154%" y="229" width="0.0459%" height="15" fill="rgb(238,167,29)" fg:x="70" fg:w="1"/><text x="3.4654%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (3 samples, 0.14%)</title><rect x="3.3532%" y="197" width="0.1378%" height="15" fill="rgb(232,182,51)" fg:x="73" fg:w="3"/><text x="3.6032%" y="207.50"></text></g><g><title>lttrs`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (9 samples, 0.41%)</title><rect x="3.1236%" y="245" width="0.4134%" height="15" fill="rgb(231,60,39)" fg:x="68" fg:w="9"/><text x="3.3736%" y="255.50"></text></g><g><title>lttrs`alloc::raw_vec::finish_grow (6 samples, 0.28%)</title><rect x="3.2614%" y="229" width="0.2756%" height="15" fill="rgb(208,69,12)" fg:x="71" fg:w="6"/><text x="3.5114%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`realloc (6 samples, 0.28%)</title><rect x="3.2614%" y="213" width="0.2756%" height="15" fill="rgb(235,93,37)" fg:x="71" fg:w="6"/><text x="3.5114%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.05%)</title><rect x="3.4910%" y="197" width="0.0459%" height="15" fill="rgb(213,116,39)" fg:x="76" fg:w="1"/><text x="3.7410%" y="207.50"></text></g><g><title>lttrs`alloc::raw_vec::finish_grow (1 samples, 0.05%)</title><rect x="3.5370%" y="245" width="0.0459%" height="15" fill="rgb(222,207,29)" fg:x="77" fg:w="1"/><text x="3.7870%" y="255.50"></text></g><g><title>lttrs`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (2 samples, 0.09%)</title><rect x="3.5829%" y="245" width="0.0919%" height="15" fill="rgb(206,96,30)" fg:x="78" fg:w="2"/><text x="3.8329%" y="255.50"></text></g><g><title>lttrs`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.05%)</title><rect x="3.6288%" y="229" width="0.0459%" height="15" fill="rgb(218,138,4)" fg:x="79" fg:w="1"/><text x="3.8788%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.32%)</title><rect x="4.3638%" y="229" width="0.3215%" height="15" fill="rgb(250,191,14)" fg:x="95" fg:w="7"/><text x="4.6138%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (10 samples, 0.46%)</title><rect x="4.6853%" y="229" width="0.4593%" height="15" fill="rgb(239,60,40)" fg:x="102" fg:w="10"/><text x="4.9353%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (8 samples, 0.37%)</title><rect x="5.1447%" y="229" width="0.3675%" height="15" fill="rgb(206,27,48)" fg:x="112" fg:w="8"/><text x="5.3947%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.23%)</title><rect x="5.5122%" y="229" width="0.2297%" height="15" fill="rgb(225,35,8)" fg:x="120" fg:w="5"/><text x="5.7622%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.14%)</title><rect x="5.7418%" y="229" width="0.1378%" height="15" fill="rgb(250,213,24)" fg:x="125" fg:w="3"/><text x="5.9918%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.09%)</title><rect x="5.8797%" y="229" width="0.0919%" height="15" fill="rgb(247,123,22)" fg:x="128" fg:w="2"/><text x="6.1297%" y="239.50"></text></g><g><title>lttrs`&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.09%)</title><rect x="5.9715%" y="229" width="0.0919%" height="15" fill="rgb(231,138,38)" fg:x="130" fg:w="2"/><text x="6.2215%" y="239.50"></text></g><g><title>lttrs`DYLD-STUB$$free (3 samples, 0.14%)</title><rect x="6.0634%" y="229" width="0.1378%" height="15" fill="rgb(231,145,46)" fg:x="132" fg:w="3"/><text x="6.3134%" y="239.50"></text></g><g><title>lttrs`DYLD-STUB$$malloc (1 samples, 0.05%)</title><rect x="6.2012%" y="229" width="0.0459%" height="15" fill="rgb(251,118,11)" fg:x="135" fg:w="1"/><text x="6.4512%" y="239.50"></text></g><g><title>lttrs`DYLD-STUB$$memcpy (1 samples, 0.05%)</title><rect x="6.2471%" y="229" width="0.0459%" height="15" fill="rgb(217,147,25)" fg:x="136" fg:w="1"/><text x="6.4971%" y="239.50"></text></g><g><title>lttrs`__rdl_alloc (3 samples, 0.14%)</title><rect x="6.2931%" y="229" width="0.1378%" height="15" fill="rgb(247,81,37)" fg:x="137" fg:w="3"/><text x="6.5431%" y="239.50"></text></g><g><title>lttrs`__rdl_dealloc (1 samples, 0.05%)</title><rect x="6.4309%" y="229" width="0.0459%" height="15" fill="rgb(209,12,38)" fg:x="140" fg:w="1"/><text x="6.6809%" y="239.50"></text></g><g><title>lttrs`__rust_dealloc (1 samples, 0.05%)</title><rect x="6.4768%" y="229" width="0.0459%" height="15" fill="rgb(227,1,9)" fg:x="141" fg:w="1"/><text x="6.7268%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.05%)</title><rect x="6.6146%" y="197" width="0.0459%" height="15" fill="rgb(248,47,43)" fg:x="144" fg:w="1"/><text x="6.8646%" y="207.50"></text></g><g><title>lttrs`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (6 samples, 0.28%)</title><rect x="6.5227%" y="229" width="0.2756%" height="15" fill="rgb(221,10,30)" fg:x="142" fg:w="6"/><text x="6.7727%" y="239.50"></text></g><g><title>lttrs`alloc::raw_vec::finish_grow (4 samples, 0.18%)</title><rect x="6.6146%" y="213" width="0.1837%" height="15" fill="rgb(210,229,1)" fg:x="144" fg:w="4"/><text x="6.8646%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`realloc (3 samples, 0.14%)</title><rect x="6.6605%" y="197" width="0.1378%" height="15" fill="rgb(222,148,37)" fg:x="145" fg:w="3"/><text x="6.9105%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (2 samples, 0.09%)</title><rect x="6.7065%" y="181" width="0.0919%" height="15" fill="rgb(234,67,33)" fg:x="146" fg:w="2"/><text x="6.9565%" y="191.50"></text></g><g><title>lttrs`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.09%)</title><rect x="7.1658%" y="213" width="0.0919%" height="15" fill="rgb(247,98,35)" fg:x="156" fg:w="2"/><text x="7.4158%" y="223.50"></text></g><g><title>lttrs`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (13 samples, 0.60%)</title><rect x="6.7983%" y="229" width="0.5972%" height="15" fill="rgb(247,138,52)" fg:x="148" fg:w="13"/><text x="7.0483%" y="239.50"></text></g><g><title>lttrs`core::hash::BuildHasher::hash_one (3 samples, 0.14%)</title><rect x="7.2577%" y="213" width="0.1378%" height="15" fill="rgb(213,79,30)" fg:x="158" fg:w="3"/><text x="7.5077%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (10 samples, 0.46%)</title><rect x="8.6817%" y="213" width="0.4593%" height="15" fill="rgb(246,177,23)" fg:x="189" fg:w="10"/><text x="8.9317%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (25 samples, 1.15%)</title><rect x="9.1410%" y="213" width="1.1484%" height="15" fill="rgb(230,62,27)" fg:x="199" fg:w="25"/><text x="9.3910%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (17 samples, 0.78%)</title><rect x="10.2894%" y="213" width="0.7809%" height="15" fill="rgb(216,154,8)" fg:x="224" fg:w="17"/><text x="10.5394%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (21 samples, 0.96%)</title><rect x="11.0703%" y="213" width="0.9646%" height="15" fill="rgb(244,35,45)" fg:x="241" fg:w="21"/><text x="11.3203%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (13 samples, 0.60%)</title><rect x="12.0349%" y="213" width="0.5972%" height="15" fill="rgb(251,115,12)" fg:x="262" fg:w="13"/><text x="12.2849%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (4 samples, 0.18%)</title><rect x="12.6321%" y="213" width="0.1837%" height="15" fill="rgb(240,54,50)" fg:x="275" fg:w="4"/><text x="12.8821%" y="223.50"></text></g><g><title>lttrs`&lt;alloc::string::String as core::clone::Clone&gt;::clone (8 samples, 0.37%)</title><rect x="12.8158%" y="213" width="0.3675%" height="15" fill="rgb(233,84,52)" fg:x="279" fg:w="8"/><text x="13.0658%" y="223.50"></text></g><g><title>lttrs`DYLD-STUB$$free (4 samples, 0.18%)</title><rect x="13.1833%" y="213" width="0.1837%" height="15" fill="rgb(207,117,47)" fg:x="287" fg:w="4"/><text x="13.4333%" y="223.50"></text></g><g><title>lttrs`DYLD-STUB$$malloc (1 samples, 0.05%)</title><rect x="13.3670%" y="213" width="0.0459%" height="15" fill="rgb(249,43,39)" fg:x="291" fg:w="1"/><text x="13.6170%" y="223.50"></text></g><g><title>lttrs`DYLD-STUB$$memcpy (2 samples, 0.09%)</title><rect x="13.4130%" y="213" width="0.0919%" height="15" fill="rgb(209,38,44)" fg:x="292" fg:w="2"/><text x="13.6630%" y="223.50"></text></g><g><title>lttrs`__rdl_alloc (3 samples, 0.14%)</title><rect x="13.5048%" y="213" width="0.1378%" height="15" fill="rgb(236,212,23)" fg:x="294" fg:w="3"/><text x="13.7548%" y="223.50"></text></g><g><title>lttrs`__rust_dealloc (1 samples, 0.05%)</title><rect x="13.6426%" y="213" width="0.0459%" height="15" fill="rgb(242,79,21)" fg:x="297" fg:w="1"/><text x="13.8926%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.05%)</title><rect x="13.6886%" y="197" width="0.0459%" height="15" fill="rgb(211,96,35)" fg:x="298" fg:w="1"/><text x="13.9386%" y="207.50"></text></g><g><title>lttrs`__rdl_realloc (2 samples, 0.09%)</title><rect x="13.7345%" y="197" width="0.0919%" height="15" fill="rgb(253,215,40)" fg:x="299" fg:w="2"/><text x="13.9845%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.05%)</title><rect x="13.8264%" y="181" width="0.0459%" height="15" fill="rgb(211,81,21)" fg:x="301" fg:w="1"/><text x="14.0764%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.05%)</title><rect x="13.9642%" y="149" width="0.0459%" height="15" fill="rgb(208,190,38)" fg:x="304" fg:w="1"/><text x="14.2142%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.23%)</title><rect x="14.0101%" y="149" width="0.2297%" height="15" fill="rgb(235,213,38)" fg:x="305" fg:w="5"/><text x="14.2601%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.09%)</title><rect x="14.2398%" y="149" width="0.0919%" height="15" fill="rgb(237,122,38)" fg:x="310" fg:w="2"/><text x="14.4898%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (13 samples, 0.60%)</title><rect x="13.9182%" y="165" width="0.5972%" height="15" fill="rgb(244,218,35)" fg:x="303" fg:w="13"/><text x="14.1682%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (4 samples, 0.18%)</title><rect x="14.3316%" y="149" width="0.1837%" height="15" fill="rgb(240,68,47)" fg:x="312" fg:w="4"/><text x="14.5816%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.14%)</title><rect x="14.3776%" y="133" width="0.1378%" height="15" fill="rgb(210,16,53)" fg:x="313" fg:w="3"/><text x="14.6276%" y="143.50"></text></g><g><title>lttrs`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (19 samples, 0.87%)</title><rect x="13.6886%" y="213" width="0.8728%" height="15" fill="rgb(235,124,12)" fg:x="298" fg:w="19"/><text x="13.9386%" y="223.50"></text></g><g><title>lttrs`alloc::raw_vec::finish_grow (16 samples, 0.73%)</title><rect x="13.8264%" y="197" width="0.7350%" height="15" fill="rgb(224,169,11)" fg:x="301" fg:w="16"/><text x="14.0764%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`realloc (15 samples, 0.69%)</title><rect x="13.8723%" y="181" width="0.6890%" height="15" fill="rgb(250,166,2)" fg:x="302" fg:w="15"/><text x="14.1223%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.05%)</title><rect x="14.5154%" y="165" width="0.0459%" height="15" fill="rgb(242,216,29)" fg:x="316" fg:w="1"/><text x="14.7654%" y="175.50"></text></g><g><title>lttrs`alloc::raw_vec::finish_grow (3 samples, 0.14%)</title><rect x="14.5613%" y="213" width="0.1378%" height="15" fill="rgb(230,116,27)" fg:x="317" fg:w="3"/><text x="14.8113%" y="223.50"></text></g><g><title>lttrs`core::hash::BuildHasher::hash_one (2 samples, 0.09%)</title><rect x="14.6991%" y="213" width="0.0919%" height="15" fill="rgb(228,99,48)" fg:x="320" fg:w="2"/><text x="14.9491%" y="223.50"></text></g><g><title>lttrs`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (7 samples, 0.32%)</title><rect x="15.8934%" y="197" width="0.3215%" height="15" fill="rgb(253,11,6)" fg:x="346" fg:w="7"/><text x="16.1434%" y="207.50"></text></g><g><title>lttrs`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (32 samples, 1.47%)</title><rect x="14.7910%" y="213" width="1.4699%" height="15" fill="rgb(247,143,39)" fg:x="322" fg:w="32"/><text x="15.0410%" y="223.50"></text></g><g><title>lttrs`core::hash::BuildHasher::hash_one (1 samples, 0.05%)</title><rect x="16.2150%" y="197" width="0.0459%" height="15" fill="rgb(236,97,10)" fg:x="353" fg:w="1"/><text x="16.4650%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (2 samples, 0.09%)</title><rect x="18.7414%" y="197" width="0.0919%" height="15" fill="rgb(233,208,19)" fg:x="408" fg:w="2"/><text x="18.9914%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (17 samples, 0.78%)</title><rect x="18.8333%" y="197" width="0.7809%" height="15" fill="rgb(216,164,2)" fg:x="410" fg:w="17"/><text x="19.0833%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (47 samples, 2.16%)</title><rect x="19.6141%" y="197" width="2.1589%" height="15" fill="rgb(220,129,5)" fg:x="427" fg:w="47"/><text x="19.8641%" y="207.50">l..</text></g><g><title>libsystem_malloc.dylib`free (27 samples, 1.24%)</title><rect x="21.7731%" y="197" width="1.2402%" height="15" fill="rgb(242,17,10)" fg:x="474" fg:w="27"/><text x="22.0231%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (31 samples, 1.42%)</title><rect x="23.0133%" y="197" width="1.4240%" height="15" fill="rgb(242,107,0)" fg:x="501" fg:w="31"/><text x="23.2633%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (21 samples, 0.96%)</title><rect x="24.4373%" y="197" width="0.9646%" height="15" fill="rgb(251,28,31)" fg:x="532" fg:w="21"/><text x="24.6873%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (3 samples, 0.14%)</title><rect x="25.4019%" y="197" width="0.1378%" height="15" fill="rgb(233,223,10)" fg:x="553" fg:w="3"/><text x="25.6519%" y="207.50"></text></g><g><title>lttrs`&lt;alloc::string::String as core::clone::Clone&gt;::clone (17 samples, 0.78%)</title><rect x="25.5397%" y="197" width="0.7809%" height="15" fill="rgb(215,21,27)" fg:x="556" fg:w="17"/><text x="25.7897%" y="207.50"></text></g><g><title>lttrs`DYLD-STUB$$free (7 samples, 0.32%)</title><rect x="26.3206%" y="197" width="0.3215%" height="15" fill="rgb(232,23,21)" fg:x="573" fg:w="7"/><text x="26.5706%" y="207.50"></text></g><g><title>lttrs`DYLD-STUB$$malloc (1 samples, 0.05%)</title><rect x="26.6422%" y="197" width="0.0459%" height="15" fill="rgb(244,5,23)" fg:x="580" fg:w="1"/><text x="26.8922%" y="207.50"></text></g><g><title>lttrs`DYLD-STUB$$memcpy (3 samples, 0.14%)</title><rect x="26.6881%" y="197" width="0.1378%" height="15" fill="rgb(226,81,46)" fg:x="581" fg:w="3"/><text x="26.9381%" y="207.50"></text></g><g><title>lttrs`__rdl_alloc (4 samples, 0.18%)</title><rect x="26.8259%" y="197" width="0.1837%" height="15" fill="rgb(247,70,30)" fg:x="584" fg:w="4"/><text x="27.0759%" y="207.50"></text></g><g><title>lttrs`__rdl_dealloc (3 samples, 0.14%)</title><rect x="27.0096%" y="197" width="0.1378%" height="15" fill="rgb(212,68,19)" fg:x="588" fg:w="3"/><text x="27.2596%" y="207.50"></text></g><g><title>lttrs`__rust_dealloc (1 samples, 0.05%)</title><rect x="27.1475%" y="197" width="0.0459%" height="15" fill="rgb(240,187,13)" fg:x="591" fg:w="1"/><text x="27.3975%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.05%)</title><rect x="27.2853%" y="181" width="0.0459%" height="15" fill="rgb(223,113,26)" fg:x="594" fg:w="1"/><text x="27.5353%" y="191.50"></text></g><g><title>lttrs`DYLD-STUB$$realloc (3 samples, 0.14%)</title><rect x="27.3312%" y="181" width="0.1378%" height="15" fill="rgb(206,192,2)" fg:x="595" fg:w="3"/><text x="27.5812%" y="191.50"></text></g><g><title>lttrs`__rdl_realloc (2 samples, 0.09%)</title><rect x="27.4690%" y="181" width="0.0919%" height="15" fill="rgb(241,108,4)" fg:x="598" fg:w="2"/><text x="27.7190%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.05%)</title><rect x="27.6068%" y="165" width="0.0459%" height="15" fill="rgb(247,173,49)" fg:x="601" fg:w="1"/><text x="27.8568%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (3 samples, 0.14%)</title><rect x="27.6527%" y="165" width="0.1378%" height="15" fill="rgb(224,114,35)" fg:x="602" fg:w="3"/><text x="27.9027%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memmove (5 samples, 0.23%)</title><rect x="28.0202%" y="133" width="0.2297%" height="15" fill="rgb(245,159,27)" fg:x="610" fg:w="5"/><text x="28.2702%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.14%)</title><rect x="28.2499%" y="133" width="0.1378%" height="15" fill="rgb(245,172,44)" fg:x="615" fg:w="3"/><text x="28.4999%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (8 samples, 0.37%)</title><rect x="28.3877%" y="133" width="0.3675%" height="15" fill="rgb(236,23,11)" fg:x="618" fg:w="8"/><text x="28.6377%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.09%)</title><rect x="28.7552%" y="133" width="0.0919%" height="15" fill="rgb(205,117,38)" fg:x="626" fg:w="2"/><text x="29.0052%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (31 samples, 1.42%)</title><rect x="27.9283%" y="149" width="1.4240%" height="15" fill="rgb(237,72,25)" fg:x="608" fg:w="31"/><text x="28.1783%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (11 samples, 0.51%)</title><rect x="28.8470%" y="133" width="0.5053%" height="15" fill="rgb(244,70,9)" fg:x="628" fg:w="11"/><text x="29.0970%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (10 samples, 0.46%)</title><rect x="28.8930%" y="117" width="0.4593%" height="15" fill="rgb(217,125,39)" fg:x="629" fg:w="10"/><text x="29.1430%" y="127.50"></text></g><g><title>lttrs`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (50 samples, 2.30%)</title><rect x="27.1934%" y="197" width="2.2967%" height="15" fill="rgb(235,36,10)" fg:x="592" fg:w="50"/><text x="27.4434%" y="207.50">l..</text></g><g><title>lttrs`alloc::raw_vec::finish_grow (42 samples, 1.93%)</title><rect x="27.5609%" y="181" width="1.9293%" height="15" fill="rgb(251,123,47)" fg:x="600" fg:w="42"/><text x="27.8109%" y="191.50">l..</text></g><g><title>libsystem_malloc.dylib`realloc (37 samples, 1.70%)</title><rect x="27.7905%" y="165" width="1.6996%" height="15" fill="rgb(221,13,13)" fg:x="605" fg:w="37"/><text x="28.0405%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (3 samples, 0.14%)</title><rect x="29.3523%" y="149" width="0.1378%" height="15" fill="rgb(238,131,9)" fg:x="639" fg:w="3"/><text x="29.6023%" y="159.50"></text></g><g><title>lttrs`alloc::raw_vec::finish_grow (2 samples, 0.09%)</title><rect x="29.4901%" y="197" width="0.0919%" height="15" fill="rgb(211,50,8)" fg:x="642" fg:w="2"/><text x="29.7401%" y="207.50"></text></g><g><title>lttrs`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (6 samples, 0.28%)</title><rect x="30.6844%" y="181" width="0.2756%" height="15" fill="rgb(245,182,24)" fg:x="668" fg:w="6"/><text x="30.9344%" y="191.50"></text></g><g><title>lttrs`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (39 samples, 1.79%)</title><rect x="29.5820%" y="197" width="1.7915%" height="15" fill="rgb(242,14,37)" fg:x="644" fg:w="39"/><text x="29.8320%" y="207.50">l..</text></g><g><title>lttrs`core::hash::BuildHasher::hash_one (9 samples, 0.41%)</title><rect x="30.9600%" y="181" width="0.4134%" height="15" fill="rgb(246,228,12)" fg:x="674" fg:w="9"/><text x="31.2100%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (1 samples, 0.05%)</title><rect x="33.9458%" y="181" width="0.0459%" height="15" fill="rgb(213,55,15)" fg:x="739" fg:w="1"/><text x="34.1958%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (21 samples, 0.96%)</title><rect x="33.9917%" y="181" width="0.9646%" height="15" fill="rgb(209,9,3)" fg:x="740" fg:w="21"/><text x="34.2417%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (60 samples, 2.76%)</title><rect x="34.9564%" y="181" width="2.7561%" height="15" fill="rgb(230,59,30)" fg:x="761" fg:w="60"/><text x="35.2064%" y="191.50">li..</text></g><g><title>libsystem_malloc.dylib`free (31 samples, 1.42%)</title><rect x="37.7124%" y="181" width="1.4240%" height="15" fill="rgb(209,121,21)" fg:x="821" fg:w="31"/><text x="37.9624%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (55 samples, 2.53%)</title><rect x="39.1364%" y="181" width="2.5264%" height="15" fill="rgb(220,109,13)" fg:x="852" fg:w="55"/><text x="39.3864%" y="191.50">li..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (50 samples, 2.30%)</title><rect x="41.6628%" y="181" width="2.2967%" height="15" fill="rgb(232,18,1)" fg:x="907" fg:w="50"/><text x="41.9128%" y="191.50">l..</text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.09%)</title><rect x="43.9596%" y="181" width="0.0919%" height="15" fill="rgb(215,41,42)" fg:x="957" fg:w="2"/><text x="44.2096%" y="191.50"></text></g><g><title>lttrs`&lt;alloc::string::String as core::clone::Clone&gt;::clone (9 samples, 0.41%)</title><rect x="44.0514%" y="181" width="0.4134%" height="15" fill="rgb(224,123,36)" fg:x="959" fg:w="9"/><text x="44.3014%" y="191.50"></text></g><g><title>lttrs`DYLD-STUB$$free (9 samples, 0.41%)</title><rect x="44.4649%" y="181" width="0.4134%" height="15" fill="rgb(240,125,3)" fg:x="968" fg:w="9"/><text x="44.7149%" y="191.50"></text></g><g><title>lttrs`DYLD-STUB$$malloc (1 samples, 0.05%)</title><rect x="44.8783%" y="181" width="0.0459%" height="15" fill="rgb(205,98,50)" fg:x="977" fg:w="1"/><text x="45.1283%" y="191.50"></text></g><g><title>lttrs`DYLD-STUB$$memcpy (2 samples, 0.09%)</title><rect x="44.9242%" y="181" width="0.0919%" height="15" fill="rgb(205,185,37)" fg:x="978" fg:w="2"/><text x="45.1742%" y="191.50"></text></g><g><title>lttrs`__rdl_alloc (11 samples, 0.51%)</title><rect x="45.0161%" y="181" width="0.5053%" height="15" fill="rgb(238,207,15)" fg:x="980" fg:w="11"/><text x="45.2661%" y="191.50"></text></g><g><title>lttrs`__rdl_dealloc (2 samples, 0.09%)</title><rect x="45.5214%" y="181" width="0.0919%" height="15" fill="rgb(213,199,42)" fg:x="991" fg:w="2"/><text x="45.7714%" y="191.50"></text></g><g><title>lttrs`__rust_dealloc (1 samples, 0.05%)</title><rect x="45.6132%" y="181" width="0.0459%" height="15" fill="rgb(235,201,11)" fg:x="993" fg:w="1"/><text x="45.8632%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.05%)</title><rect x="45.8429%" y="165" width="0.0459%" height="15" fill="rgb(207,46,11)" fg:x="998" fg:w="1"/><text x="46.0929%" y="175.50"></text></g><g><title>lttrs`DYLD-STUB$$realloc (3 samples, 0.14%)</title><rect x="45.8888%" y="165" width="0.1378%" height="15" fill="rgb(241,35,35)" fg:x="999" fg:w="3"/><text x="46.1388%" y="175.50"></text></g><g><title>lttrs`__rdl_realloc (4 samples, 0.18%)</title><rect x="46.0266%" y="165" width="0.1837%" height="15" fill="rgb(243,32,47)" fg:x="1002" fg:w="4"/><text x="46.2766%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (6 samples, 0.28%)</title><rect x="46.2563%" y="149" width="0.2756%" height="15" fill="rgb(247,202,23)" fg:x="1007" fg:w="6"/><text x="46.5063%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (1 samples, 0.05%)</title><rect x="46.7157%" y="133" width="0.0459%" height="15" fill="rgb(219,102,11)" fg:x="1017" fg:w="1"/><text x="46.9657%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memmove (1 samples, 0.05%)</title><rect x="46.8535%" y="117" width="0.0459%" height="15" fill="rgb(243,110,44)" fg:x="1020" fg:w="1"/><text x="47.1035%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (17 samples, 0.78%)</title><rect x="46.8994%" y="117" width="0.7809%" height="15" fill="rgb(222,74,54)" fg:x="1021" fg:w="17"/><text x="47.1494%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (5 samples, 0.23%)</title><rect x="47.6803%" y="117" width="0.2297%" height="15" fill="rgb(216,99,12)" fg:x="1038" fg:w="5"/><text x="47.9303%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (13 samples, 0.60%)</title><rect x="47.9100%" y="117" width="0.5972%" height="15" fill="rgb(226,22,26)" fg:x="1043" fg:w="13"/><text x="48.1600%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (10 samples, 0.46%)</title><rect x="48.0478%" y="101" width="0.4593%" height="15" fill="rgb(217,163,10)" fg:x="1046" fg:w="10"/><text x="48.2978%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`realloc (47 samples, 2.16%)</title><rect x="46.5319%" y="149" width="2.1589%" height="15" fill="rgb(213,25,53)" fg:x="1013" fg:w="47"/><text x="46.7819%" y="159.50">l..</text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (42 samples, 1.93%)</title><rect x="46.7616%" y="133" width="1.9293%" height="15" fill="rgb(252,105,26)" fg:x="1018" fg:w="42"/><text x="47.0116%" y="143.50">l..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.18%)</title><rect x="48.5071%" y="117" width="0.1837%" height="15" fill="rgb(220,39,43)" fg:x="1056" fg:w="4"/><text x="48.7571%" y="127.50"></text></g><g><title>lttrs`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (67 samples, 3.08%)</title><rect x="45.6592%" y="181" width="3.0776%" height="15" fill="rgb(229,68,48)" fg:x="994" fg:w="67"/><text x="45.9092%" y="191.50">ltt..</text></g><g><title>lttrs`alloc::raw_vec::finish_grow (55 samples, 2.53%)</title><rect x="46.2104%" y="165" width="2.5264%" height="15" fill="rgb(252,8,32)" fg:x="1006" fg:w="55"/><text x="46.4604%" y="175.50">lt..</text></g><g><title>lttrs`__rdl_realloc (1 samples, 0.05%)</title><rect x="48.6909%" y="149" width="0.0459%" height="15" fill="rgb(223,20,43)" fg:x="1060" fg:w="1"/><text x="48.9409%" y="159.50"></text></g><g><title>lttrs`alloc::raw_vec::finish_grow (3 samples, 0.14%)</title><rect x="48.7368%" y="181" width="0.1378%" height="15" fill="rgb(229,81,49)" fg:x="1061" fg:w="3"/><text x="48.9868%" y="191.50"></text></g><g><title>lttrs`core::hash::BuildHasher::hash_one (3 samples, 0.14%)</title><rect x="48.8746%" y="181" width="0.1378%" height="15" fill="rgb(236,28,36)" fg:x="1064" fg:w="3"/><text x="49.1246%" y="191.50"></text></g><g><title>lttrs`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (7 samples, 0.32%)</title><rect x="50.8498%" y="165" width="0.3215%" height="15" fill="rgb(249,185,26)" fg:x="1107" fg:w="7"/><text x="51.0998%" y="175.50"></text></g><g><title>lttrs`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (63 samples, 2.89%)</title><rect x="49.0124%" y="181" width="2.8939%" height="15" fill="rgb(249,174,33)" fg:x="1067" fg:w="63"/><text x="49.2624%" y="191.50">lt..</text></g><g><title>lttrs`core::hash::BuildHasher::hash_one (16 samples, 0.73%)</title><rect x="51.1713%" y="165" width="0.7350%" height="15" fill="rgb(233,201,37)" fg:x="1114" fg:w="16"/><text x="51.4213%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (2 samples, 0.09%)</title><rect x="55.4433%" y="165" width="0.0919%" height="15" fill="rgb(221,78,26)" fg:x="1207" fg:w="2"/><text x="55.6933%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (19 samples, 0.87%)</title><rect x="55.5351%" y="165" width="0.8728%" height="15" fill="rgb(250,127,30)" fg:x="1209" fg:w="19"/><text x="55.7851%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (49 samples, 2.25%)</title><rect x="56.4079%" y="165" width="2.2508%" height="15" fill="rgb(230,49,44)" fg:x="1228" fg:w="49"/><text x="56.6579%" y="175.50">l..</text></g><g><title>libsystem_malloc.dylib`free (21 samples, 0.96%)</title><rect x="58.6587%" y="165" width="0.9646%" height="15" fill="rgb(229,67,23)" fg:x="1277" fg:w="21"/><text x="58.9087%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (48 samples, 2.20%)</title><rect x="59.6233%" y="165" width="2.2049%" height="15" fill="rgb(249,83,47)" fg:x="1298" fg:w="48"/><text x="59.8733%" y="175.50">l..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (49 samples, 2.25%)</title><rect x="61.8282%" y="165" width="2.2508%" height="15" fill="rgb(215,43,3)" fg:x="1346" fg:w="49"/><text x="62.0782%" y="175.50">l..</text></g><g><title>libsystem_platform.dylib`_platform_memset (3 samples, 0.14%)</title><rect x="64.0790%" y="165" width="0.1378%" height="15" fill="rgb(238,154,13)" fg:x="1395" fg:w="3"/><text x="64.3290%" y="175.50"></text></g><g><title>lttrs`&lt;alloc::string::String as core::clone::Clone&gt;::clone (16 samples, 0.73%)</title><rect x="64.2168%" y="165" width="0.7350%" height="15" fill="rgb(219,56,2)" fg:x="1398" fg:w="16"/><text x="64.4668%" y="175.50"></text></g><g><title>lttrs`DYLD-STUB$$free (9 samples, 0.41%)</title><rect x="64.9518%" y="165" width="0.4134%" height="15" fill="rgb(233,0,4)" fg:x="1414" fg:w="9"/><text x="65.2018%" y="175.50"></text></g><g><title>lttrs`DYLD-STUB$$malloc (5 samples, 0.23%)</title><rect x="65.3652%" y="165" width="0.2297%" height="15" fill="rgb(235,30,7)" fg:x="1423" fg:w="5"/><text x="65.6152%" y="175.50"></text></g><g><title>lttrs`DYLD-STUB$$memcpy (2 samples, 0.09%)</title><rect x="65.5949%" y="165" width="0.0919%" height="15" fill="rgb(250,79,13)" fg:x="1428" fg:w="2"/><text x="65.8449%" y="175.50"></text></g><g><title>lttrs`__rdl_alloc (7 samples, 0.32%)</title><rect x="65.6867%" y="165" width="0.3215%" height="15" fill="rgb(211,146,34)" fg:x="1430" fg:w="7"/><text x="65.9367%" y="175.50"></text></g><g><title>lttrs`__rdl_dealloc (1 samples, 0.05%)</title><rect x="66.0083%" y="165" width="0.0459%" height="15" fill="rgb(228,22,38)" fg:x="1437" fg:w="1"/><text x="66.2583%" y="175.50"></text></g><g><title>lttrs`__rust_dealloc (7 samples, 0.32%)</title><rect x="66.0542%" y="165" width="0.3215%" height="15" fill="rgb(235,168,5)" fg:x="1438" fg:w="7"/><text x="66.3042%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (2 samples, 0.09%)</title><rect x="66.6054%" y="149" width="0.0919%" height="15" fill="rgb(221,155,16)" fg:x="1450" fg:w="2"/><text x="66.8554%" y="159.50"></text></g><g><title>lttrs`__rdl_realloc (2 samples, 0.09%)</title><rect x="66.6973%" y="149" width="0.0919%" height="15" fill="rgb(215,215,53)" fg:x="1452" fg:w="2"/><text x="66.9473%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (5 samples, 0.23%)</title><rect x="66.8810%" y="133" width="0.2297%" height="15" fill="rgb(223,4,10)" fg:x="1456" fg:w="5"/><text x="67.1310%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (1 samples, 0.05%)</title><rect x="67.2944%" y="117" width="0.0459%" height="15" fill="rgb(234,103,6)" fg:x="1465" fg:w="1"/><text x="67.5444%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memmove (1 samples, 0.05%)</title><rect x="67.4782%" y="101" width="0.0459%" height="15" fill="rgb(227,97,0)" fg:x="1469" fg:w="1"/><text x="67.7282%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.09%)</title><rect x="67.5241%" y="101" width="0.0919%" height="15" fill="rgb(234,150,53)" fg:x="1470" fg:w="2"/><text x="67.7741%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (16 samples, 0.73%)</title><rect x="67.6160%" y="101" width="0.7350%" height="15" fill="rgb(228,201,54)" fg:x="1472" fg:w="16"/><text x="67.8660%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (6 samples, 0.28%)</title><rect x="68.3509%" y="101" width="0.2756%" height="15" fill="rgb(222,22,37)" fg:x="1488" fg:w="6"/><text x="68.6009%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (12 samples, 0.55%)</title><rect x="68.6266%" y="101" width="0.5512%" height="15" fill="rgb(237,53,32)" fg:x="1494" fg:w="12"/><text x="68.8766%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (10 samples, 0.46%)</title><rect x="68.7184%" y="85" width="0.4593%" height="15" fill="rgb(233,25,53)" fg:x="1496" fg:w="10"/><text x="68.9684%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (43 samples, 1.98%)</title><rect x="67.3404%" y="117" width="1.9752%" height="15" fill="rgb(210,40,34)" fg:x="1466" fg:w="43"/><text x="67.5904%" y="127.50">l..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.14%)</title><rect x="69.1778%" y="101" width="0.1378%" height="15" fill="rgb(241,220,44)" fg:x="1506" fg:w="3"/><text x="69.4278%" y="111.50"></text></g><g><title>lttrs`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (65 samples, 2.99%)</title><rect x="66.3757%" y="165" width="2.9858%" height="15" fill="rgb(235,28,35)" fg:x="1445" fg:w="65"/><text x="66.6257%" y="175.50">ltt..</text></g><g><title>lttrs`alloc::raw_vec::finish_grow (56 samples, 2.57%)</title><rect x="66.7892%" y="149" width="2.5723%" height="15" fill="rgb(210,56,17)" fg:x="1454" fg:w="56"/><text x="67.0392%" y="159.50">lt..</text></g><g><title>libsystem_malloc.dylib`realloc (49 samples, 2.25%)</title><rect x="67.1107%" y="133" width="2.2508%" height="15" fill="rgb(224,130,29)" fg:x="1461" fg:w="49"/><text x="67.3607%" y="143.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.05%)</title><rect x="69.3156%" y="117" width="0.0459%" height="15" fill="rgb(235,212,8)" fg:x="1509" fg:w="1"/><text x="69.5656%" y="127.50"></text></g><g><title>lttrs`alloc::raw_vec::finish_grow (1 samples, 0.05%)</title><rect x="69.3615%" y="165" width="0.0459%" height="15" fill="rgb(223,33,50)" fg:x="1510" fg:w="1"/><text x="69.6115%" y="175.50"></text></g><g><title>lttrs`core::hash::BuildHasher::hash_one (4 samples, 0.18%)</title><rect x="69.4074%" y="165" width="0.1837%" height="15" fill="rgb(219,149,13)" fg:x="1511" fg:w="4"/><text x="69.6574%" y="175.50"></text></g><g><title>lttrs`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (5 samples, 0.23%)</title><rect x="71.7960%" y="149" width="0.2297%" height="15" fill="rgb(250,156,29)" fg:x="1563" fg:w="5"/><text x="72.0460%" y="159.50"></text></g><g><title>lttrs`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (64 samples, 2.94%)</title><rect x="69.5912%" y="165" width="2.9398%" height="15" fill="rgb(216,193,19)" fg:x="1515" fg:w="64"/><text x="69.8412%" y="175.50">lt..</text></g><g><title>lttrs`core::hash::BuildHasher::hash_one (11 samples, 0.51%)</title><rect x="72.0257%" y="149" width="0.5053%" height="15" fill="rgb(216,135,14)" fg:x="1568" fg:w="11"/><text x="72.2757%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (2 samples, 0.09%)</title><rect x="75.2412%" y="149" width="0.0919%" height="15" fill="rgb(241,47,5)" fg:x="1638" fg:w="2"/><text x="75.4912%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (16 samples, 0.73%)</title><rect x="75.3330%" y="149" width="0.7350%" height="15" fill="rgb(233,42,35)" fg:x="1640" fg:w="16"/><text x="75.5830%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (39 samples, 1.79%)</title><rect x="76.0680%" y="149" width="1.7915%" height="15" fill="rgb(231,13,6)" fg:x="1656" fg:w="39"/><text x="76.3180%" y="159.50">l..</text></g><g><title>libsystem_malloc.dylib`free (7 samples, 0.32%)</title><rect x="77.8594%" y="149" width="0.3215%" height="15" fill="rgb(207,181,40)" fg:x="1695" fg:w="7"/><text x="78.1094%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (33 samples, 1.52%)</title><rect x="78.1810%" y="149" width="1.5158%" height="15" fill="rgb(254,173,49)" fg:x="1702" fg:w="33"/><text x="78.4310%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (47 samples, 2.16%)</title><rect x="79.6968%" y="149" width="2.1589%" height="15" fill="rgb(221,1,38)" fg:x="1735" fg:w="47"/><text x="79.9468%" y="159.50">l..</text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.05%)</title><rect x="81.8558%" y="149" width="0.0459%" height="15" fill="rgb(206,124,46)" fg:x="1782" fg:w="1"/><text x="82.1058%" y="159.50"></text></g><g><title>lttrs`&lt;alloc::string::String as core::clone::Clone&gt;::clone (10 samples, 0.46%)</title><rect x="81.9017%" y="149" width="0.4593%" height="15" fill="rgb(249,21,11)" fg:x="1783" fg:w="10"/><text x="82.1517%" y="159.50"></text></g><g><title>lttrs`DYLD-STUB$$free (3 samples, 0.14%)</title><rect x="82.3610%" y="149" width="0.1378%" height="15" fill="rgb(222,201,40)" fg:x="1793" fg:w="3"/><text x="82.6110%" y="159.50"></text></g><g><title>lttrs`DYLD-STUB$$malloc (5 samples, 0.23%)</title><rect x="82.4989%" y="149" width="0.2297%" height="15" fill="rgb(235,61,29)" fg:x="1796" fg:w="5"/><text x="82.7489%" y="159.50"></text></g><g><title>lttrs`__rdl_alloc (5 samples, 0.23%)</title><rect x="82.7285%" y="149" width="0.2297%" height="15" fill="rgb(219,207,3)" fg:x="1801" fg:w="5"/><text x="82.9785%" y="159.50"></text></g><g><title>lttrs`__rdl_dealloc (1 samples, 0.05%)</title><rect x="82.9582%" y="149" width="0.0459%" height="15" fill="rgb(222,56,46)" fg:x="1806" fg:w="1"/><text x="83.2082%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.05%)</title><rect x="83.1419%" y="133" width="0.0459%" height="15" fill="rgb(239,76,54)" fg:x="1810" fg:w="1"/><text x="83.3919%" y="143.50"></text></g><g><title>lttrs`DYLD-STUB$$realloc (2 samples, 0.09%)</title><rect x="83.1879%" y="133" width="0.0919%" height="15" fill="rgb(231,124,27)" fg:x="1811" fg:w="2"/><text x="83.4379%" y="143.50"></text></g><g><title>lttrs`__rdl_realloc (1 samples, 0.05%)</title><rect x="83.2797%" y="133" width="0.0459%" height="15" fill="rgb(249,195,6)" fg:x="1813" fg:w="1"/><text x="83.5297%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (7 samples, 0.32%)</title><rect x="83.4175%" y="117" width="0.3215%" height="15" fill="rgb(237,174,47)" fg:x="1816" fg:w="7"/><text x="83.6675%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memmove (2 samples, 0.09%)</title><rect x="83.9228%" y="85" width="0.0919%" height="15" fill="rgb(206,201,31)" fg:x="1827" fg:w="2"/><text x="84.1728%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.05%)</title><rect x="84.0147%" y="85" width="0.0459%" height="15" fill="rgb(231,57,52)" fg:x="1829" fg:w="1"/><text x="84.2647%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (15 samples, 0.69%)</title><rect x="84.0606%" y="85" width="0.6890%" height="15" fill="rgb(248,177,22)" fg:x="1830" fg:w="15"/><text x="84.3106%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (5 samples, 0.23%)</title><rect x="84.7497%" y="85" width="0.2297%" height="15" fill="rgb(215,211,37)" fg:x="1845" fg:w="5"/><text x="84.9997%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (7 samples, 0.32%)</title><rect x="84.9793%" y="85" width="0.3215%" height="15" fill="rgb(241,128,51)" fg:x="1850" fg:w="7"/><text x="85.2293%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (6 samples, 0.28%)</title><rect x="85.0253%" y="69" width="0.2756%" height="15" fill="rgb(227,165,31)" fg:x="1851" fg:w="6"/><text x="85.2753%" y="79.50"></text></g><g><title>lttrs`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (53 samples, 2.43%)</title><rect x="83.0041%" y="149" width="2.4345%" height="15" fill="rgb(228,167,24)" fg:x="1807" fg:w="53"/><text x="83.2541%" y="159.50">lt..</text></g><g><title>lttrs`alloc::raw_vec::finish_grow (46 samples, 2.11%)</title><rect x="83.3257%" y="133" width="2.1130%" height="15" fill="rgb(228,143,12)" fg:x="1814" fg:w="46"/><text x="83.5757%" y="143.50">l..</text></g><g><title>libsystem_malloc.dylib`realloc (37 samples, 1.70%)</title><rect x="83.7391%" y="117" width="1.6996%" height="15" fill="rgb(249,149,8)" fg:x="1823" fg:w="37"/><text x="83.9891%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (35 samples, 1.61%)</title><rect x="83.8310%" y="101" width="1.6077%" height="15" fill="rgb(243,35,44)" fg:x="1825" fg:w="35"/><text x="84.0810%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.14%)</title><rect x="85.3009%" y="85" width="0.1378%" height="15" fill="rgb(246,89,9)" fg:x="1857" fg:w="3"/><text x="85.5509%" y="95.50"></text></g><g><title>lttrs`alloc::raw_vec::finish_grow (1 samples, 0.05%)</title><rect x="85.4387%" y="149" width="0.0459%" height="15" fill="rgb(233,213,13)" fg:x="1860" fg:w="1"/><text x="85.6887%" y="159.50"></text></g><g><title>lttrs`core::hash::BuildHasher::hash_one (1 samples, 0.05%)</title><rect x="85.4846%" y="149" width="0.0459%" height="15" fill="rgb(233,141,41)" fg:x="1861" fg:w="1"/><text x="85.7346%" y="159.50"></text></g><g><title>lttrs`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (14 samples, 0.64%)</title><rect x="86.4492%" y="133" width="0.6431%" height="15" fill="rgb(239,167,4)" fg:x="1882" fg:w="14"/><text x="86.6992%" y="143.50"></text></g><g><title>lttrs`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (42 samples, 1.93%)</title><rect x="85.5305%" y="149" width="1.9293%" height="15" fill="rgb(209,217,16)" fg:x="1862" fg:w="42"/><text x="85.7805%" y="159.50">l..</text></g><g><title>lttrs`core::hash::BuildHasher::hash_one (8 samples, 0.37%)</title><rect x="87.0923%" y="133" width="0.3675%" height="15" fill="rgb(219,88,35)" fg:x="1896" fg:w="8"/><text x="87.3423%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.28%)</title><rect x="89.0216%" y="133" width="0.2756%" height="15" fill="rgb(220,193,23)" fg:x="1938" fg:w="6"/><text x="89.2716%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (22 samples, 1.01%)</title><rect x="89.2972%" y="133" width="1.0106%" height="15" fill="rgb(230,90,52)" fg:x="1944" fg:w="22"/><text x="89.5472%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.18%)</title><rect x="90.3078%" y="133" width="0.1837%" height="15" fill="rgb(252,106,19)" fg:x="1966" fg:w="4"/><text x="90.5578%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (24 samples, 1.10%)</title><rect x="90.4915%" y="133" width="1.1024%" height="15" fill="rgb(206,74,20)" fg:x="1970" fg:w="24"/><text x="90.7415%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (32 samples, 1.47%)</title><rect x="91.5939%" y="133" width="1.4699%" height="15" fill="rgb(230,138,44)" fg:x="1994" fg:w="32"/><text x="91.8439%" y="143.50"></text></g><g><title>lttrs`&lt;alloc::string::String as core::clone::Clone&gt;::clone (8 samples, 0.37%)</title><rect x="93.0638%" y="133" width="0.3675%" height="15" fill="rgb(235,182,43)" fg:x="2026" fg:w="8"/><text x="93.3138%" y="143.50"></text></g><g><title>lttrs`__rdl_alloc (8 samples, 0.37%)</title><rect x="93.4313%" y="133" width="0.3675%" height="15" fill="rgb(242,16,51)" fg:x="2034" fg:w="8"/><text x="93.6813%" y="143.50"></text></g><g><title>lttrs`__rdl_dealloc (2 samples, 0.09%)</title><rect x="93.7988%" y="133" width="0.0919%" height="15" fill="rgb(248,9,4)" fg:x="2042" fg:w="2"/><text x="94.0488%" y="143.50"></text></g><g><title>lttrs`__rdl_realloc (2 samples, 0.09%)</title><rect x="93.9366%" y="117" width="0.0919%" height="15" fill="rgb(210,31,22)" fg:x="2045" fg:w="2"/><text x="94.1866%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.05%)</title><rect x="94.0285%" y="101" width="0.0459%" height="15" fill="rgb(239,54,39)" fg:x="2047" fg:w="1"/><text x="94.2785%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (4 samples, 0.18%)</title><rect x="94.0744%" y="101" width="0.1837%" height="15" fill="rgb(230,99,41)" fg:x="2048" fg:w="4"/><text x="94.3244%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (1 samples, 0.05%)</title><rect x="94.3960%" y="85" width="0.0459%" height="15" fill="rgb(253,106,12)" fg:x="2055" fg:w="1"/><text x="94.6460%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.05%)</title><rect x="94.4878%" y="69" width="0.0459%" height="15" fill="rgb(213,46,41)" fg:x="2057" fg:w="1"/><text x="94.7378%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (12 samples, 0.55%)</title><rect x="94.5338%" y="69" width="0.5512%" height="15" fill="rgb(215,133,35)" fg:x="2058" fg:w="12"/><text x="94.7838%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (10 samples, 0.46%)</title><rect x="95.0850%" y="69" width="0.4593%" height="15" fill="rgb(213,28,5)" fg:x="2070" fg:w="10"/><text x="95.3350%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (4 samples, 0.18%)</title><rect x="95.5443%" y="69" width="0.1837%" height="15" fill="rgb(215,77,49)" fg:x="2080" fg:w="4"/><text x="95.7943%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.14%)</title><rect x="95.5903%" y="53" width="0.1378%" height="15" fill="rgb(248,100,22)" fg:x="2081" fg:w="3"/><text x="95.8403%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (30 samples, 1.38%)</title><rect x="94.4419%" y="85" width="1.3780%" height="15" fill="rgb(208,67,9)" fg:x="2056" fg:w="30"/><text x="94.6919%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.09%)</title><rect x="95.7281%" y="69" width="0.0919%" height="15" fill="rgb(219,133,21)" fg:x="2084" fg:w="2"/><text x="95.9781%" y="79.50"></text></g><g><title>lttrs`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (44 samples, 2.02%)</title><rect x="93.8907%" y="133" width="2.0211%" height="15" fill="rgb(246,46,29)" fg:x="2044" fg:w="44"/><text x="94.1407%" y="143.50">l..</text></g><g><title>lttrs`alloc::raw_vec::finish_grow (41 samples, 1.88%)</title><rect x="94.0285%" y="117" width="1.8833%" height="15" fill="rgb(246,185,52)" fg:x="2047" fg:w="41"/><text x="94.2785%" y="127.50">l..</text></g><g><title>libsystem_malloc.dylib`realloc (36 samples, 1.65%)</title><rect x="94.2582%" y="101" width="1.6537%" height="15" fill="rgb(252,136,11)" fg:x="2052" fg:w="36"/><text x="94.5082%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (2 samples, 0.09%)</title><rect x="95.8199%" y="85" width="0.0919%" height="15" fill="rgb(219,138,53)" fg:x="2086" fg:w="2"/><text x="96.0699%" y="95.50"></text></g><g><title>lttrs`alloc::raw_vec::finish_grow (1 samples, 0.05%)</title><rect x="95.9118%" y="133" width="0.0459%" height="15" fill="rgb(211,51,23)" fg:x="2088" fg:w="1"/><text x="96.1618%" y="143.50"></text></g><g><title>lttrs`core::hash::BuildHasher::hash_one (1 samples, 0.05%)</title><rect x="95.9577%" y="133" width="0.0459%" height="15" fill="rgb(247,221,28)" fg:x="2089" fg:w="1"/><text x="96.2077%" y="143.50"></text></g><g><title>lttrs`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (14 samples, 0.64%)</title><rect x="96.9683%" y="117" width="0.6431%" height="15" fill="rgb(251,222,45)" fg:x="2111" fg:w="14"/><text x="97.2183%" y="127.50"></text></g><g><title>lttrs`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (38 samples, 1.75%)</title><rect x="96.0037%" y="133" width="1.7455%" height="15" fill="rgb(217,162,53)" fg:x="2090" fg:w="38"/><text x="96.2537%" y="143.50"></text></g><g><title>lttrs`core::hash::BuildHasher::hash_one (3 samples, 0.14%)</title><rect x="97.6114%" y="117" width="0.1378%" height="15" fill="rgb(229,93,14)" fg:x="2125" fg:w="3"/><text x="97.8614%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.14%)</title><rect x="98.3923%" y="117" width="0.1378%" height="15" fill="rgb(209,67,49)" fg:x="2142" fg:w="3"/><text x="98.6423%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.14%)</title><rect x="98.5301%" y="117" width="0.1378%" height="15" fill="rgb(213,87,29)" fg:x="2145" fg:w="3"/><text x="98.7801%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.18%)</title><rect x="98.6679%" y="117" width="0.1837%" height="15" fill="rgb(205,151,52)" fg:x="2148" fg:w="4"/><text x="98.9179%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.09%)</title><rect x="98.8516%" y="117" width="0.0919%" height="15" fill="rgb(253,215,39)" fg:x="2152" fg:w="2"/><text x="99.1016%" y="127.50"></text></g><g><title>lttrs`&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.05%)</title><rect x="98.9435%" y="117" width="0.0459%" height="15" fill="rgb(221,220,41)" fg:x="2154" fg:w="1"/><text x="99.1935%" y="127.50"></text></g><g><title>lttrs`DYLD-STUB$$malloc (4 samples, 0.18%)</title><rect x="98.9894%" y="117" width="0.1837%" height="15" fill="rgb(218,133,21)" fg:x="2155" fg:w="4"/><text x="99.2394%" y="127.50"></text></g><g><title>lttrs`__rdl_alloc (1 samples, 0.05%)</title><rect x="99.1732%" y="117" width="0.0459%" height="15" fill="rgb(221,193,43)" fg:x="2159" fg:w="1"/><text x="99.4232%" y="127.50"></text></g><g><title>lttrs`DYLD-STUB$$realloc (2 samples, 0.09%)</title><rect x="99.2191%" y="101" width="0.0919%" height="15" fill="rgb(240,128,52)" fg:x="2160" fg:w="2"/><text x="99.4691%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.05%)</title><rect x="99.3110%" y="85" width="0.0459%" height="15" fill="rgb(253,114,12)" fg:x="2162" fg:w="1"/><text x="99.5610%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.09%)</title><rect x="99.3569%" y="53" width="0.0919%" height="15" fill="rgb(215,223,47)" fg:x="2163" fg:w="2"/><text x="99.6069%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.05%)</title><rect x="99.4488%" y="53" width="0.0459%" height="15" fill="rgb(248,225,23)" fg:x="2165" fg:w="1"/><text x="99.6988%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (5 samples, 0.23%)</title><rect x="99.3569%" y="69" width="0.2297%" height="15" fill="rgb(250,108,0)" fg:x="2163" fg:w="5"/><text x="99.6069%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (2 samples, 0.09%)</title><rect x="99.4947%" y="53" width="0.0919%" height="15" fill="rgb(228,208,7)" fg:x="2166" fg:w="2"/><text x="99.7447%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.09%)</title><rect x="99.4947%" y="37" width="0.0919%" height="15" fill="rgb(244,45,10)" fg:x="2166" fg:w="2"/><text x="99.7447%" y="47.50"></text></g><g><title>lttrs`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (10 samples, 0.46%)</title><rect x="99.2191%" y="117" width="0.4593%" height="15" fill="rgb(207,125,25)" fg:x="2160" fg:w="10"/><text x="99.4691%" y="127.50"></text></g><g><title>lttrs`alloc::raw_vec::finish_grow (8 samples, 0.37%)</title><rect x="99.3110%" y="101" width="0.3675%" height="15" fill="rgb(210,195,18)" fg:x="2162" fg:w="8"/><text x="99.5610%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`realloc (7 samples, 0.32%)</title><rect x="99.3569%" y="85" width="0.3215%" height="15" fill="rgb(249,80,12)" fg:x="2163" fg:w="7"/><text x="99.6069%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (2 samples, 0.09%)</title><rect x="99.5866%" y="69" width="0.0919%" height="15" fill="rgb(221,65,9)" fg:x="2168" fg:w="2"/><text x="99.8366%" y="79.50"></text></g><g><title>lttrs`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.05%)</title><rect x="99.7703%" y="101" width="0.0459%" height="15" fill="rgb(235,49,36)" fg:x="2172" fg:w="1"/><text x="100.0203%" y="111.50"></text></g><g><title>lttrs`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (5 samples, 0.23%)</title><rect x="99.6785%" y="117" width="0.2297%" height="15" fill="rgb(225,32,20)" fg:x="2170" fg:w="5"/><text x="99.9285%" y="127.50"></text></g><g><title>lttrs`core::hash::BuildHasher::hash_one (2 samples, 0.09%)</title><rect x="99.8163%" y="101" width="0.0919%" height="15" fill="rgb(215,141,46)" fg:x="2173" fg:w="2"/><text x="100.0663%" y="111.50"></text></g><g><title>lttrs`lttrs::find_words_starting_at (2,156 samples, 99.04%)</title><rect x="0.9187%" y="373" width="99.0354%" height="15" fill="rgb(250,160,47)" fg:x="20" fg:w="2156"/><text x="1.1687%" y="383.50">lttrs`lttrs::find_words_starting_at</text></g><g><title>lttrs`lttrs::find_words_starting_at (2,156 samples, 99.04%)</title><rect x="0.9187%" y="357" width="99.0354%" height="15" fill="rgb(216,222,40)" fg:x="20" fg:w="2156"/><text x="1.1687%" y="367.50">lttrs`lttrs::find_words_starting_at</text></g><g><title>lttrs`lttrs::find_words_starting_at (2,156 samples, 99.04%)</title><rect x="0.9187%" y="341" width="99.0354%" height="15" fill="rgb(234,217,39)" fg:x="20" fg:w="2156"/><text x="1.1687%" y="351.50">lttrs`lttrs::find_words_starting_at</text></g><g><title>lttrs`lttrs::find_words_starting_at (2,155 samples, 98.99%)</title><rect x="0.9646%" y="325" width="98.9894%" height="15" fill="rgb(207,178,40)" fg:x="21" fg:w="2155"/><text x="1.2146%" y="335.50">lttrs`lttrs::find_words_starting_at</text></g><g><title>lttrs`lttrs::find_words_starting_at (2,155 samples, 98.99%)</title><rect x="0.9646%" y="309" width="98.9894%" height="15" fill="rgb(221,136,13)" fg:x="21" fg:w="2155"/><text x="1.2146%" y="319.50">lttrs`lttrs::find_words_starting_at</text></g><g><title>lttrs`lttrs::find_words_starting_at (2,155 samples, 98.99%)</title><rect x="0.9646%" y="293" width="98.9894%" height="15" fill="rgb(249,199,10)" fg:x="21" fg:w="2155"/><text x="1.2146%" y="303.50">lttrs`lttrs::find_words_starting_at</text></g><g><title>lttrs`lttrs::find_words_starting_at (2,152 samples, 98.85%)</title><rect x="1.1024%" y="277" width="98.8516%" height="15" fill="rgb(249,222,13)" fg:x="24" fg:w="2152"/><text x="1.3524%" y="287.50">lttrs`lttrs::find_words_starting_at</text></g><g><title>lttrs`lttrs::find_words_starting_at (2,139 samples, 98.25%)</title><rect x="1.6996%" y="261" width="98.2545%" height="15" fill="rgb(244,185,38)" fg:x="37" fg:w="2139"/><text x="1.9496%" y="271.50">lttrs`lttrs::find_words_starting_at</text></g><g><title>lttrs`lttrs::find_words_starting_at (2,096 samples, 96.28%)</title><rect x="3.6748%" y="245" width="96.2793%" height="15" fill="rgb(236,202,9)" fg:x="80" fg:w="2096"/><text x="3.9248%" y="255.50">lttrs`lttrs::find_words_starting_at</text></g><g><title>lttrs`lttrs::find_words_starting_at (2,015 samples, 92.56%)</title><rect x="7.3955%" y="229" width="92.5586%" height="15" fill="rgb(250,229,37)" fg:x="161" fg:w="2015"/><text x="7.6455%" y="239.50">lttrs`lttrs::find_words_starting_at</text></g><g><title>lttrs`lttrs::find_words_starting_at (1,822 samples, 83.69%)</title><rect x="16.2609%" y="213" width="83.6932%" height="15" fill="rgb(206,174,23)" fg:x="354" fg:w="1822"/><text x="16.5109%" y="223.50">lttrs`lttrs::find_words_starting_at</text></g><g><title>lttrs`lttrs::find_words_starting_at (1,493 samples, 68.58%)</title><rect x="31.3734%" y="197" width="68.5806%" height="15" fill="rgb(211,33,43)" fg:x="683" fg:w="1493"/><text x="31.6234%" y="207.50">lttrs`lttrs::find_words_starting_at</text></g><g><title>lttrs`lttrs::find_words_starting_at (1,046 samples, 48.05%)</title><rect x="51.9063%" y="181" width="48.0478%" height="15" fill="rgb(245,58,50)" fg:x="1130" fg:w="1046"/><text x="52.1563%" y="191.50">lttrs`lttrs::find_words_starting_at</text></g><g><title>lttrs`lttrs::find_words_starting_at (597 samples, 27.42%)</title><rect x="72.5310%" y="165" width="27.4231%" height="15" fill="rgb(244,68,36)" fg:x="1579" fg:w="597"/><text x="72.7810%" y="175.50">lttrs`lttrs::find_words_starting_at</text></g><g><title>lttrs`lttrs::find_words_starting_at (272 samples, 12.49%)</title><rect x="87.4598%" y="149" width="12.4943%" height="15" fill="rgb(232,229,15)" fg:x="1904" fg:w="272"/><text x="87.7098%" y="159.50">lttrs`lttrs::find_w..</text></g><g><title>lttrs`lttrs::find_words_starting_at (48 samples, 2.20%)</title><rect x="97.7492%" y="133" width="2.2049%" height="15" fill="rgb(254,30,23)" fg:x="2128" fg:w="48"/><text x="97.9992%" y="143.50">l..</text></g><g><title>lttrs`lttrs::find_words_starting_at (1 samples, 0.05%)</title><rect x="99.9081%" y="117" width="0.0459%" height="15" fill="rgb(235,160,14)" fg:x="2175" fg:w="1"/><text x="100.1581%" y="127.50"></text></g><g><title>all (2,177 samples, 100%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(212,155,44)" fg:x="0" fg:w="2177"/><text x="0.2500%" y="495.50"></text></g><g><title>dyld`start (2,177 samples, 100.00%)</title><rect x="0.0000%" y="469" width="100.0000%" height="15" fill="rgb(226,2,50)" fg:x="0" fg:w="2177"/><text x="0.2500%" y="479.50">dyld`start</text></g><g><title>lttrs`main (2,177 samples, 100.00%)</title><rect x="0.0000%" y="453" width="100.0000%" height="15" fill="rgb(234,177,6)" fg:x="0" fg:w="2177"/><text x="0.2500%" y="463.50">lttrs`main</text></g><g><title>lttrs`std::rt::lang_start_internal (2,177 samples, 100.00%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(217,24,9)" fg:x="0" fg:w="2177"/><text x="0.2500%" y="447.50">lttrs`std::rt::lang_start_internal</text></g><g><title>lttrs`std::rt::lang_start::_{{closure}} (2,177 samples, 100.00%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(220,13,46)" fg:x="0" fg:w="2177"/><text x="0.2500%" y="431.50">lttrs`std::rt::lang_start::_{{closure}}</text></g><g><title>lttrs`std::sys_common::backtrace::__rust_begin_short_backtrace (2,177 samples, 100.00%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(239,221,27)" fg:x="0" fg:w="2177"/><text x="0.2500%" y="415.50">lttrs`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>lttrs`lttrs::main (2,175 samples, 99.91%)</title><rect x="0.0919%" y="389" width="99.9081%" height="15" fill="rgb(222,198,25)" fg:x="2" fg:w="2175"/><text x="0.3419%" y="399.50">lttrs`lttrs::main</text></g><g><title>lttrs`std::fs::read_to_string::inner (1 samples, 0.05%)</title><rect x="99.9541%" y="373" width="0.0459%" height="15" fill="rgb(211,99,13)" fg:x="2176" fg:w="1"/><text x="100.2041%" y="383.50"></text></g><g><title>lttrs`std::io::append_to_string (1 samples, 0.05%)</title><rect x="99.9541%" y="357" width="0.0459%" height="15" fill="rgb(232,111,31)" fg:x="2176" fg:w="1"/><text x="100.2041%" y="367.50"></text></g><g><title>libsystem_kernel.dylib`read (1 samples, 0.05%)</title><rect x="99.9541%" y="341" width="0.0459%" height="15" fill="rgb(245,82,37)" fg:x="2176" fg:w="1"/><text x="100.2041%" y="351.50"></text></g></svg></svg>